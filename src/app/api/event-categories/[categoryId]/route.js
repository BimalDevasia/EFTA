import { connectDB } from '@/lib/mongoose';
import EventCategory from '@/lib/models/eventCategory';
import { NextResponse } from 'next/server';

// GET - Fetch specific event category
export async function GET(req, { params }) {
  try {
    await connectDB();
    
    const { categoryId } = params;
    const eventCategory = await EventCategory.findById(categoryId)
      .populate('products', 'productId productName productMRP images giftType isVisible isActive');
    
    if (!eventCategory) {
      return NextResponse.json(
        { success: false, error: 'Event category not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      eventCategory
    });
    
  } catch (error) {
    console.error('Error fetching event category:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// PUT - Update event category
export async function PUT(req, { params }) {
  console.log('üîÑ PUT request received for event category update');
  try {
    await connectDB();
    console.log('üìä Database connected successfully');
    
    const { categoryId } = params;
    const data = await req.json();
    
    console.log('üìù Update request details:');
    console.log('  - categoryId:', categoryId);
    console.log('  - data:', data);
    
    // Auto-generate tag from title if title is being updated
    if (data.title) {
      const autoGeneratedTag = data.title
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, '') // Remove special characters
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
        .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens

      console.log('üè∑Ô∏è Auto-generated tag from title:', autoGeneratedTag);
      
      // Check if auto-generated tag conflicts with existing categories (excluding current one)
      let finalTag = autoGeneratedTag;
      let counter = 2;
      
      while (await EventCategory.findOne({ tag: finalTag, _id: { $ne: categoryId } })) {
        finalTag = `${autoGeneratedTag}-${counter}`;
        counter++;
      }
      
      if (finalTag !== autoGeneratedTag) {
        console.log('üîÑ Tag conflict resolved, using:', finalTag);
      } else {
        console.log('‚úÖ Tag is unique, proceeding with:', finalTag);
      }
      
      data.tag = finalTag;
    }

    console.log('üîÑ Attempting to update category with ID:', categoryId);
    console.log('üìä Update data:', data);
    
    const eventCategory = await EventCategory.findByIdAndUpdate(
      categoryId,
      data,
      { new: true, runValidators: true }
    ).populate('products', 'name price image');
    
    console.log('üìÑ Update result:', eventCategory);
    
    if (!eventCategory) {
      console.log('‚ùå Category not found for ID:', categoryId);
      return NextResponse.json(
        { success: false, error: 'Event category not found' },
        { status: 404 }
      );
    }
    
    console.log('‚úÖ Category updated successfully');
    return NextResponse.json({
      success: true,
      message: 'Event category updated successfully',
      eventCategory
    });
    
  } catch (error) {
    console.error('üí• Error updating event category:', error);
    console.error('üìç Error details:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });
    
    if (error.code === 11000) {
      console.log('üîÑ Duplicate key error detected');
      return NextResponse.json(
        { success: false, error: 'A category with this name already exists' },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// DELETE - Delete event category
export async function DELETE(req, { params }) {
  try {
    await connectDB();
    
    const { categoryId } = params;
    const eventCategory = await EventCategory.findByIdAndDelete(categoryId);
    
    if (!eventCategory) {
      return NextResponse.json(
        { success: false, error: 'Event category not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      message: 'Event category deleted successfully'
    });
    
  } catch (error) {
    console.error('Error deleting event category:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}
