import { connectDB } from '@/lib/mongoose';
import EventCategory from '@/lib/models/eventCategory';
import Product from '@/lib/models/product';
import { NextResponse } from 'next/server';

// GET - Fetch all event categories
export async function GET(req) {
  try {
    await connectDB();
    
    const { searchParams } = new URL(req.url);
    const activeOnly = searchParams.get('active') === 'true';
    
    let query = {};
    if (activeOnly) {
      query.isActive = true;
    }
    
    const eventCategories = await EventCategory.find(query)
      .populate('products', 'productName price productId image giftType')
      .sort({ createdAt: 1 });
    
    return NextResponse.json({
      success: true,
      eventCategories
    });
    
  } catch (error) {
    console.error('Error fetching event categories:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// POST - Create new event category
export async function POST(req) {
  try {
    await connectDB();
    
    const data = await req.json();
    
    // Validate required fields (tag is now auto-generated)
    if (!data.title || !data.color) {
      return NextResponse.json(
        { success: false, error: 'Title and color are required' },
        { status: 400 }
      );
    }

    // Auto-generate tag from title
    const autoGeneratedTag = data.title
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '') // Remove special characters
      .replace(/\s+/g, '-') // Replace spaces with hyphens
      .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
      .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens

    // Check if auto-generated tag already exists
    let finalTag = autoGeneratedTag;
    let counter = 2;
    
    while (await EventCategory.findOne({ tag: finalTag })) {
      finalTag = `${autoGeneratedTag}-${counter}`;
      counter++;
    }

    console.log('Auto-generated tag:', finalTag);

    // Create new event category
    const eventCategory = new EventCategory({
      ...data,
      tag: finalTag
    });
    
    await eventCategory.save();
    
    // Populate products for response
    await eventCategory.populate('products', 'name price image');
    
    return NextResponse.json({
      success: true,
      message: 'Event category created successfully',
      eventCategory
    });
    
  } catch (error) {
    console.error('Error creating event category:', error);
    
    if (error.code === 11000) {
      return NextResponse.json(
        { success: false, error: 'Tag already exists' },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}
